package com.lyeeedar.AI.BehaviourTree.Actions

import com.badlogic.gdx.utils.Array
import com.badlogic.gdx.utils.ObjectSet
import com.lyeeedar.AI.BehaviourTree.BehaviourTreeState
import com.lyeeedar.AI.BehaviourTree.EvaluationState
import com.lyeeedar.Components.*
import com.lyeeedar.Game.Tile
import com.lyeeedar.Pathfinding.PathfindCache
import com.lyeeedar.Pathfinding.TestTile
import com.lyeeedar.SpaceSlot
import com.lyeeedar.TestWorld
import com.lyeeedar.Util.Array2D
import com.lyeeedar.Util.Point
import com.lyeeedar.createWorld
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNotEquals
import org.junit.Test
import squidpony.squidmath.LightRNG
import java.lang.StringBuilder

class MoveToBehaviourActionTests
{
	fun createOutput(world: TestWorld, path: ObjectSet<Point>): String
	{
		val builder = StringBuilder()

		for (y in 0 until world.world.grid.height)
		{
			for (x in 0 until world.world.grid.width)
			{
				val tile = world.world.grid[x,y]
				if (path.contains(tile))
				{
					builder.append('p')
				}
				else if (tile.contents[SpaceSlot.ENTITY] != null)
				{
					builder.append('A')
				}
				else if (tile == world.endTile)
				{
					builder.append('+')
				}
				else if (tile == world.startTile)
				{
					builder.append('@')
				}
				else if (tile.wall != null)
				{
					builder.append('#')
				}
				else
				{
					builder.append('.')
				}
			}
			builder.append("\n")
		}

		return builder.toString().trim()
	}

	fun testPathing(grid: String, path: String, shouldBeReusingPath: Boolean = true)
	{
		val world = createWorld(grid)

		val entity = Entity()
		entity.obtained = true
		entity.addComponent(ComponentType.Position)
		entity.addComponent(ComponentType.Task)
		entity.addComponent(ComponentType.Statistics)
		entity.position()!!.position = world.startTile
		entity.statistics()!!.faction = "faction"

		world.startTile.contents[SpaceSlot.ENTITY] = entity.getRef()

		val aiState = BehaviourTreeState()
		aiState.set(entity.getRef(), world.world, 0)

		val moveToAction = MoveToBehaviourAction()
		moveToAction.key = "dst"

		aiState.setData("dst", 0, world.endTile)

		val pathTaken = ObjectSet<Point>()
		pathTaken.add(world.startTile)

		val rng = LightRNG(0)
		fun doTurn(shouldDoTask: Boolean): EvaluationState
		{
			val state = moveToAction.evaluate(aiState)

			val task = entity.task()!!

			if (shouldDoTask && state == EvaluationState.RUNNING)
			{
				assertEquals(1, task.tasks.size)

				task.tasks[0].execute(entity, world.world, rng)
				task.tasks.clear()
			}
			else
			{
				assertEquals(0, task.tasks.size)
			}

			return state
		}

		var i = 0
		while (i < 100)
		{
			val preMove = entity.position()!!.position.copy()
			val state = doTurn(true)
			if (state != EvaluationState.RUNNING)
			{
				break
			}

			i++

			pathTaken.add(entity.position()!!.position)

			if (preMove == entity.position()!!.position)
			{
				break
			}

			val cache = aiState.getData<PathfindCache<Tile>>(moveToAction.cacheKey, moveToAction.dataGuid)!!
			if (shouldBeReusingPath)
			{
				assertEquals(i-1, cache.reuseCount)
			}

			for (entity in world.entitiesToCountDown)
			{
				val pos = entity.position()!!
				pos.turnsOnTile++
			}
		}

		for (n in 0 until 50)
		{
			val preMove = entity.position()!!.position.copy()
			val state = doTurn(false)

			assertNotEquals(EvaluationState.RUNNING, state)
			assertEquals(entity.position()!!.position, preMove)
		}

		assertEquals(path, createOutput(world, pathTaken))

		assertNotEquals(100, i)

		assertEquals(i+1, path.count { it == 'p' })
	}

	@Test
	fun simplePath()
	{
		val grid = """
			................
			.......+........
			................
			................
			................
			.......@........
			................
		""".trimIndent()

		val path = """
			................
			.......p........
			.......p........
			.......p........
			.......p........
			.......p........
			................
		""".trimIndent()

		testPathing(grid, path)
	}

	@Test
	fun aroundWall()
	{
		val grid = """
			................
			.......+.#......
			.....#####......
			................
			................
			.......@........
			................
		""".trimIndent()

		val path = """
			................
			....pppp.#......
			....p#####......
			....pppp........
			.......p........
			.......p........
			................
		""".trimIndent()

		testPathing(grid, path)
	}

	@Test
	fun blocked()
	{
		val grid = """
			.....#...#......
			.....#.+.#......
			.....#####......
			................
			................
			.......@........
			................
		""".trimIndent()

		val path = """
			.....#...#......
			.....#.+.#......
			.....#####......
			.......p........
			.......p........
			.......p........
			................
		""".trimIndent()

		testPathing(grid, path, false)
	}

	@Test
	fun blockedByAlly()
	{
		val grid = """
			.....#...#......
			.....A.+.#......
			.....##A##......
			................
			................
			.......@........
			................
		""".trimIndent()

		val path = """
			.....#...#......
			.....A.+.#......
			.....##A##......
			.......p........
			.......p........
			.......p........
			................
		""".trimIndent()

		testPathing(grid, path, true)
	}

	@Test
	fun allyBlockingBestPath()
	{
		val grid = """
			................
			......A+........
			......AAA.......
			................
			................
			.......@........
			................
		""".trimIndent()

		val path = """
			................
			......Appp......
			......AAAp......
			.......ppp......
			.......p........
			.......p........
			................
		""".trimIndent()

		testPathing(grid, path, true)
	}

	@Test
	fun allyBlockingBestPathLong()
	{
		val grid = """
			.....#...#......
			.......+.#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....##A##......
			................
			................
			................
			................
			................
			.......@........
			................
		""".trimIndent()

		val path = """
			.....#...#......
			.......+.#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....##A##......
			.......p........
			.......p........
			.......p........
			.......p........
			.......p........
			.......p........
			................
		""".trimIndent()

		testPathing(grid, path, true)
	}

	@Test
	fun allyBlockingBestPathTurnsOnTile()
	{
		val grid = """
			.....#...#......
			.......+.#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....#...#......
			.....##a##......
			................
			................
			................
			................
			................
			.......@........
			................
		""".trimIndent()

		val path = """
			.....#...#......
			....pppp.#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p#...#......
			....p##A##......
			....pppp........
			.......p........
			.......p........
			.......p........
			.......p........
			.......p........
			................
		""".trimIndent()

		testPathing(grid, path, false)
	}
}